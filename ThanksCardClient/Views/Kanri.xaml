<Window x:Class="ThanksCardClient.Views.Kanri"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:ThanksCardClient.Views"
        xmlns:vm="clr-namespace:ThanksCardClient.ViewModels"
Title=" 管理" Height="500" Width="750" Background="#F5F5F5"
        WindowStartupLocation="CenterOwner">

    <Window.DataContext>
        <vm:KanriViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>


        <l:InteractionMessageTrigger MessageKey="ShowCreatedEmployee" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowCreatedBusyo" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowUpdatedBusyo" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowUpdatedEmployee" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowMainWindow" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <!-- EditUserViewModel からの TransitionMessage("Created") を受け取とってログオン画面を閉じる処理。 -->
        <l:InteractionMessageTrigger MessageKey="Created" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>


    <Grid Height="640">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="43*"/>
            <ColumnDefinition Width="7*"/>
        </Grid.ColumnDefinitions>

        <StackPanel Grid.ColumnSpan="2" Margin="0,0,-54,10">
            <UniformGrid  Columns="2" Margin="0,0,51,0">
                <TextBlock Grid.Row="2" Grid.Column="0" Text="管理画面" FontWeight="Bold" Foreground="White" FontSize="20" VerticalAlignment="Top" Background="#3CB371" Margin="0,0,-373,0" Height="32"/>
                <Button Content="ログアウト" Command="{Binding ShowMainWindowCommand}" Background="#3CB371" Foreground="White" Margin="272,0,-1,0" RenderTransformOrigin="0.5,0.5" FontWeight="Bold" FontSize="20"/>
            </UniformGrid>
        </StackPanel>

        <StackPanel>
            <Button Content="新規登録" Command="{Binding ShowCreatedEmployeeCommand}" Background="#9ACD32" Foreground="White" Margin="116,100,0,527" FontSize="20" FontWeight="Bold" Height="45"/>
        </StackPanel>
        <StackPanel>
            <Button Content="部署登録＆課登録" Command="{Binding ShowCreatedBusyoCommand}" Background="#9ACD32" Foreground="White" Margin="116,160,0,430"  FontSize="20" FontWeight="Bold" Height="45"/>
        </StackPanel>
        <StackPanel>
            <Button Content="部署編集＆課編集" Command="{Binding ShowUpdatedBusyoCommand}" Background="#9ACD32" Foreground="White" Margin="116,220,0,216"  FontSize="20" FontWeight="Bold" Height="45"/>
        </StackPanel>
        <StackPanel Grid.ColumnSpan="2">
            <Button Content="ユーザー編集" Command="{Binding ShowUpdatedEmployeeCommand}" Background="#9ACD32" Foreground="White" Margin="116,280,102,324" RenderTransformOrigin="0.5,0.5"  FontSize="20" FontWeight="Bold" Height="45"/>
        </StackPanel>



    </Grid>
</Window>