<Window x:Class="ThanksCardClient.Views.Mypage"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:ThanksCardClient.Views"
        xmlns:vm="clr-namespace:ThanksCardClient.ViewModels"
        Title="⌂マイページ" Height="350" Width="525" Background="AliceBlue">

    <Window.DataContext>
        <vm:MypageViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <l:InteractionMessageTrigger MessageKey="ShowMainWindow" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>
        
        <l:InteractionMessageTrigger MessageKey="ShowMypage" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>
        
        <l:InteractionMessageTrigger MessageKey="ShowKeiziban" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowPickup" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowBusyo" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowRanking" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowKanshaCard" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->
        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid>


        <StackPanel>

            <StackPanel Grid.ColumnSpan="2" Height="127">
                <TextBlock Grid.Row="2" Grid.Column="0" Text="マイページ" FontWeight="Bold" Foreground="White" FontSize="20" VerticalAlignment="Top" Background=" #3CB371"></TextBlock>
                <Button Content="ログアウト" Command="{Binding ShowMainWindowCommand}" Margin="454,0,0,0"/>
                <UniformGrid  Columns="5" Background="#9ACD32">
                    <Button Content="マイページ" Command="{Binding ShowMypageCommand}" Background="#9ACD32" Foreground="White" Height="32" />
                    <Button Content="掲示板" Command="{Binding ShowKeizibanCommand}" Background="#9ACD32" Foreground="White"/>
                    <Button Content="ピックアップ" Command="{Binding ShowPickupCommand}" Background="#9ACD32" Foreground="White"/>
                    <Button Content="部署" Command="{Binding ShowBusyoCommand}" Background="#9ACD32" Foreground="White"/>
                    <Button Content="ランキング" Command="{Binding ShowRankingCommand}" Background="#9ACD32" Foreground="White"/>
                </UniformGrid>

                <Button Content="感謝カード作成" Command="{Binding ShowKanshaCardCommand}" Margin="440,0,0,0"/>
            
            </StackPanel>
            <TextBlock Text="1番感謝カードをくれた人" FontWeight="Bold" Foreground="White" FontSize="20" VerticalAlignment="Top" Background=" #3CB371" Height="26"/>
            <TextBlock Text="自分宛感謝カード" FontWeight="Bold" Foreground="White" FontSize="20" VerticalAlignment="Top" Background=" #3CB371" Height="26"/>
            <TextBlock Text="お気に入り" FontWeight="Bold" Foreground="White" FontSize="20" VerticalAlignment="Top" Background=" #3CB371" Height="26"/>
            <TextBlock Text="送信一覧" FontWeight="Bold" Foreground="White" FontSize="20" VerticalAlignment="Top" Background=" #3CB371" Height="26"/>
        </StackPanel>
    </Grid>
</Window>
