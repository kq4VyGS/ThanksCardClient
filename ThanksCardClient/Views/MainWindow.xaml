<Window x:Class="ThanksCardClient.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:ThanksCardClient.Views"
        xmlns:vm="clr-namespace:ThanksCardClient.ViewModels"
        Title="ログイン" Height="371.615" Width="521.115" Background="#F5F5F5"
        WindowStartupLocation="CenterOwner">

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>



    <i:Interaction.Triggers>

        <l:InteractionMessageTrigger MessageKey="ShowMypage" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>


        <l:InteractionMessageTrigger MessageKey="ShowKanri" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション
                Window を非表示にしてもメッセージを送信できるようにするには InvokeActionOnlyWhenWindowIsActive="False" が必要 -->
            <l:TransitionInteractionMessageAction  Mode="Modal"  InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <!-- LogonViewModel からの TransitionMessage("Authorized") を受け取とってログオン画面を閉じる処理。 -->
        <l:InteractionMessageTrigger MessageKey="Authorized" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <Window.Resources>
        <Style x:Key="WatermarkTextbox" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid Background="White">
                            <ScrollViewer x:Name="PART_ContentHost" Margin="5,0,0,0" VerticalAlignment="Center"/>
                            <TextBlock x:Name="WaterMarkLabel" Text="{TemplateBinding Tag}" Opacity=".5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Visibility="Collapsed"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Text" Value="">
                                <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>



    <Grid>
        <TextBlock Grid.Row="2" Grid.Column="0" Text="" Foreground="White" FontSize="30" VerticalAlignment="Top" Background=" #3CB371"></TextBlock>

        <StackPanel>
            <TextBlock Text="{Binding ErrorMessage}" Foreground="Red"/>
            <TextBlock Text="―Login―" Margin="190,50,0,0" FontSize="25" FontWeight="Bold" FontFamily="Aharoni"/>
            <UniformGrid  Columns="2">
                <TextBlock Text="メールアドレス" Margin="65,25,19,0" FontWeight="Bold" FontSize="25" Height="33" Width="175"/>
                <TextBox Text="{Binding Employee.MailAddress}" Height="33" Width="200" Style="{StaticResource WatermarkTextbox}" 
                         Tag="名前を入力してください" Margin="0,25,0,0" />
            </UniformGrid>
            <UniformGrid  Columns="2" Height="80">
                <TextBlock Text="パスワード" Margin="66,20,9,0" FontWeight="Bold" FontSize="25" Height="33" Width="175"/>
                <PasswordBox Height="33" Width="200"
                            InputMethod.PreferredImeState="On" InputMethod.PreferredImeConversionMode="Alphanumeric" Margin="0,20,9,0">
                    <i:Interaction.Behaviors>
                        <l:PasswordBoxBindingSupportBehavior Password="{Binding Employee.Password}" />
                    </i:Interaction.Behaviors>
                </PasswordBox>
            </UniformGrid>

        </StackPanel>

        <StackPanel Orientation="Horizontal">

            <Button Content="管理者ログイン" Command="{Binding Logon2Command}" Margin="280,250,0,60" 
                    Background="#6495ED" Foreground="White" FontSize="15" Width="100"/>
            <Button Content="ログイン" Command="{Binding LogonCommand}" Margin="20,250,0,60"
                    Background="#6495ED" Foreground="White" FontSize="15" Width="80"/>

        </StackPanel>

        <TextBlock Grid.Row="2" Grid.Column="0"  FontSize="30" VerticalAlignment="Bottom" Background=" #3CB371"></TextBlock>


    </Grid>
</Window>